name: API Tests CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN_SECRET: ${{ secrets.MY_GH_PAT }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Create config.properties from secret
        run: |
          mkdir -p src/test/resources/schemas
          cat > src/test/resources/schemas/config.properties <<EOF
          # generated in workflow - do not commit
          base.url.github=https://api.github.com
          github.token=${{ secrets.MY_GH_PAT }}
          github.token.ttlSeconds=3
          EOF

      - name: Run Maven tests
        run: mvn clean test -DsuiteXmlFile=testng.xml

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        
        with:
          name: allure-results
          path: target/allure-results/**

      - name: Download and install Allure CLI (robust)
        run: |
         set -euo pipefail
         mkdir -p "$HOME/.allure"
         OUT=/tmp/allure.tgz

         # try Maven Central first, then GitHub releases as fallback
          URLS=(
            "https://repo.maven.org/maven2/io/qameta/allure/allure-commandline/2.13.9/allure-commandline-2.13.9.tgz"
             "https://github.com/allure-framework/allure2/releases/download/2.13.9/allure-2.13.9.tgz"
          )

         success=0
         for url in "${URLS[@]}"; do
         echo "Trying $url"
         # fetch with curl and fail on HTTP >=400
         if curl -fSL "$url" -o "$OUT"; then
         echo "Downloaded $url -> $OUT"
         success=1
         break
         else
         echo "Download failed for $url"
         fi
         done

         if [ "$success" -ne 1 ]; then
         echo "ERROR: Could not download Allure CLI from known locations."
         ls -la /tmp || true
         exit 2
         fi

         # sanity: check file is non-empty and valid tar
         if [ ! -s "$OUT" ]; then
         echo "ERROR: downloaded file is empty"
         ls -la "$OUT" || true
         exit 3
         fi

         # try listing contents first (for better error message if tar fails)
         echo "Archive contents preview:"
         tar -tzf "$OUT" | head -n 20 || true

         # extract
         tar -xzf "$OUT" -C "$HOME/.allure" --strip-components=1
         echo "$HOME/.allure/bin" >> "$GITHUB_PATH"

         echo "Allure installed to $HOME/.allure/bin"
         ls -la "$HOME/.allure/bin" || true


      - name: Generate Allure report
        run: |
         ls -la target/allure-results || true
         allure generate target/allure-results -o target/allure-report --clean

      - name: Sanitize Allure results
        run: |
         find target/allure-results -type f -exec sed -i 's/ghp_[A-Za-z0-9]*/***REDACTED***/g' {} +


      # optionally publish to gh-pages
      - name: Deploy Allure to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.MY_GH_PAT }}
          publish_dir: ./target/allure-report



